{"version":3,"sources":["components/styles/Card.module.css","components/styles/Controls.module.css","components/styles/Status.module.css","components/styles/Hand.module.css","components/Status.tsx","components/Controls.tsx","components/Card.tsx","components/Hand.tsx","components/App.tsx","index.tsx"],"names":["module","exports","Status","message","className","styles","statusContainer","status","Controls","buttonState","hitEvent","standEvent","resetEvent","controlsContainer","onClick","disabled","hitDisabled","button","standDisabled","resetDisabled","Card","value","suit","hidden","hiddenCard","card","black","red","Hand","title","cards","handContainer","cardContainer","map","index","key","App","data","JSON","parse","stringify","jsonData","useState","deck","setDeck","userCards","setUserCards","userScore","setUserScore","userCount","setUserCount","userTurn","setUserTurn","dealerCards","setDealerCards","dealerScore","setDealerScore","dealerCount","setDealerCount","dealerTurn","setDealerTurn","init","setInit","setMessage","setButtonState","useEffect","drawCard","calculate","bust","checkWin","player","length","randomIndex","Math","floor","random","splice","console","log","dealCard","alert","push","setScore","total","forEach","Number","aces","filter","clear","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fe3f2ef1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__tKJf7\",\"hiddenCard\":\"Card_hiddenCard__3HJye\",\"black\":\"Card_black__3wE7w\",\"red\":\"Card_red__U3k4T\",\"value\":\"Card_value__2_TCt\",\"suit\":\"Card_suit__1PgAX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controlsContainer\":\"Controls_controlsContainer__3t7YK\",\"button\":\"Controls_button__l32aW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusContainer\":\"Status_statusContainer__2VMKh\",\"status\":\"Status_status__2jOmW\",\"message\":\"Status_message__37uUD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"handContainer\":\"Hand_handContainer__1mkLE\",\"cardContainer\":\"Hand_cardContainer__1PoGg\",\"title\":\"Hand_title__1orDn\"};","import React from 'react';\r\nimport styles from './styles/Status.module.css';\r\n\r\ntype StatusProps = {\r\n  message: string\r\n};\r\n\r\nconst Status: React.FC<StatusProps> = ({ message }) => {\r\n  return (\r\n    <div className={styles.statusContainer}>\r\n      <div className={styles.status}>\r\n        <h1 className={styles.message}>{message}</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Status;","import React from 'react';\r\nimport styles from './styles/Controls.module.css';\r\n\r\ntype ControlsProps = {\r\n  buttonState: any,\r\n  hitEvent: any,\r\n  standEvent: any,\r\n  resetEvent: any\r\n};\r\n\r\nconst Controls: React.FC<ControlsProps> = ({ buttonState, hitEvent, standEvent, resetEvent }) => {\r\n  return (\r\n    <div className={styles.controlsContainer}>\r\n      <button onClick={() => hitEvent()} disabled={buttonState.hitDisabled} className={styles.button}>Hit</button>\r\n      <button onClick={() => standEvent()} disabled={buttonState.standDisabled} className={styles.button}>Stand</button>\r\n      <button onClick={() => resetEvent()} disabled={buttonState.resetDisabled} className={styles.button}>Reset</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Controls;","import React from 'react';\r\nimport styles from './styles/Card.module.css';\r\n\r\ntype CardProps = {\r\n  value: string;\r\n  suit: string;\r\n  hidden: boolean;\r\n};\r\n\r\nconst Card: React.FC<CardProps> = ({ value, suit, hidden }) => {\r\n  const getColor = () => {\r\n    if (suit === '♠' || suit === '♣') {\r\n      return styles.black;\r\n    }\r\n    else {\r\n      return styles.red;\r\n    }\r\n  }\r\n\r\n  const getCard = () => {\r\n    if (hidden) {\r\n      return (\r\n        <div className={styles.hiddenCard} />\r\n      );\r\n    }\r\n    else {\r\n      return (\r\n        <div className={styles.card}>\r\n          <div className={getColor()}>\r\n            <h1 className={styles.value}>{value}</h1>\r\n            <h1 className={styles.suit}>{suit}</h1>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {getCard()}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport styles from './styles/Hand.module.css';\r\nimport Card from './Card';\r\n\r\ntype HandProps = {\r\n  title: string,\r\n  cards: any[]\r\n};\r\n\r\nconst Hand: React.FC<HandProps> = ({ title, cards }) => {\r\n  return (\r\n    <div className={styles.handContainer}>\r\n      <h1 className={styles.title}>{title}</h1>\r\n      <div className={styles.cardContainer}>\r\n        {cards.map((card: any, index: number) => {\r\n          return (\r\n            <Card key={index} value={card.value} suit={card.suit} hidden={card.hidden} />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Hand;","import React, { useState, useEffect } from 'react';\r\nimport Status from './Status';\r\nimport Controls from './Controls';\r\nimport Hand from './Hand';\r\nimport jsonData from '../deck.json';\r\n\r\nconst App: React.FC = () => {\r\n  const data = JSON.parse(JSON.stringify(jsonData.cards))\r\n  const [deck, setDeck]: any[] = useState(data);\r\n\r\n  const [userCards, setUserCards]: any[] = useState([]);\r\n  const [userScore, setUserScore] = useState(0);\r\n  const [userCount, setUserCount] = useState(0);\r\n  const [userTurn, setUserTurn] = useState(true);\r\n\r\n  const [dealerCards, setDealerCards]: any[] = useState([]);\r\n  const [dealerScore, setDealerScore] = useState(0);\r\n  const [dealerCount, setDealerCount] = useState(0);\r\n  const [dealerTurn, setDealerTurn] = useState(false);\r\n\r\n  const [init, setInit] = useState(true);\r\n  const [message, setMessage] = useState('Hit or Stand?');\r\n  const [buttonState, setButtonState] = useState({\r\n    hitDisabled: false,\r\n    standDisabled: false,\r\n    resetDisabled: true\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (init) {\r\n      drawCard('user');\r\n      drawCard('dealer-hidden');\r\n      drawCard('user');\r\n      drawCard('dealer');\r\n      setInit(false);\r\n    }\r\n  }, [init]);\r\n\r\n  useEffect(() => {\r\n    calculate(userCards, setUserScore);\r\n    setUserCount(userCount + 1);\r\n  }, [userCards]);\r\n\r\n  useEffect(() => {\r\n    calculate(dealerCards, setDealerScore);\r\n    setDealerCount(dealerCount + 1);\r\n  }, [dealerCards]);\r\n\r\n  useEffect(() => {\r\n    if (userTurn) {\r\n      if (userScore === 21) {\r\n        buttonState.hitDisabled = true;\r\n        setButtonState({ ...buttonState });\r\n      }\r\n      else if (userScore > 21) {\r\n        bust();\r\n      }\r\n    }\r\n  }, [userCount]);\r\n\r\n  useEffect(() => {\r\n    if (dealerTurn) {\r\n      if (dealerScore >= 17) {\r\n        checkWin();\r\n      }\r\n      else {\r\n        drawCard('dealer');\r\n      }\r\n    }\r\n  }, [dealerCount]);\r\n\r\n  const resetGame = () => {\r\n    console.clear();\r\n    setDeck(data);\r\n\r\n    setUserCards([]);\r\n    setUserScore(0);\r\n    setUserCount(0);\r\n    setUserTurn(true);\r\n\r\n    setDealerCards([]);\r\n    setDealerScore(0);\r\n    setDealerCount(0);\r\n    setDealerTurn(false);\r\n\r\n    setInit(true);\r\n    setMessage('Hit or Stand?');\r\n    setButtonState({\r\n      hitDisabled: false,\r\n      standDisabled: false,\r\n      resetDisabled: true\r\n    });\r\n  }\r\n\r\n  const drawCard = (player: string) => {\r\n    if (deck.length > 0) {\r\n      const randomIndex = Math.floor(Math.random() * deck.length);\r\n      const card = deck[randomIndex];\r\n      deck.splice(randomIndex, 1);\r\n      setDeck([...deck]);\r\n      console.log('Remaining Cards:', deck.length);\r\n      switch (card.suit) {\r\n        case 'spades':\r\n          dealCard(player, card.value, '♠');\r\n          break;\r\n        case 'diamonds':\r\n          dealCard(player, card.value, '♦');\r\n          break;\r\n        case 'clubs':\r\n          dealCard(player, card.value, '♣');\r\n          break;\r\n        case 'hearts':\r\n          dealCard(player, card.value, '♥');\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    else {\r\n      alert('All cards have been drawn');\r\n    }\r\n  }\r\n\r\n  const dealCard = (player: string, value: string, suit: string) => {\r\n    switch (player) {\r\n      case 'user':\r\n        userCards.push({ 'value': value, 'suit': suit, 'hidden': false });\r\n        setUserCards([...userCards]);\r\n        break;\r\n      case 'dealer':\r\n        dealerCards.push({ 'value': value, 'suit': suit, 'hidden': false });\r\n        setDealerCards([...dealerCards]);\r\n        break;\r\n      case 'dealer-hidden':\r\n        dealerCards.push({ 'value': value, 'suit': suit, 'hidden': true });\r\n        setDealerCards([...dealerCards]);\r\n        break;\r\n      case 'test-u1':\r\n        userCards.push({ 'value': 'A', 'suit': '♠', 'hidden': false });\r\n        setUserCards([...userCards]);\r\n        break;\r\n      case 'test-u2':\r\n        userCards.push({ 'value': 'K', 'suit': '♠', 'hidden': false });\r\n        setUserCards([...userCards]);\r\n        break;\r\n      case 'test-d1':\r\n        dealerCards.push({ 'value': 'A', 'suit': '♠', 'hidden': true });\r\n        setUserCards([...userCards]);\r\n        break;\r\n      case 'test-d2':\r\n        dealerCards.push({ 'value': '5', 'suit': '♠', 'hidden': false });\r\n        setUserCards([...userCards]);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  const revealCard = () => {\r\n    dealerCards.filter((card: any) => {\r\n      if (card.hidden === true) {\r\n        card.hidden = false;\r\n      }\r\n      return card;\r\n    });\r\n    setDealerCards([...dealerCards])\r\n  }\r\n\r\n  const calculate = (cards: any[], setScore: any) => {\r\n    let total = 0;\r\n    cards.forEach((card: any) => {\r\n      if (card.hidden === false && card.value !== 'A') {\r\n        switch (card.value) {\r\n          case 'K':\r\n            total += 10;\r\n            break;\r\n          case 'Q':\r\n            total += 10;\r\n            break;\r\n          case 'J':\r\n            total += 10;\r\n            break;\r\n          default:\r\n            total += Number(card.value);\r\n            break;\r\n        }\r\n      }\r\n    });\r\n    const aces = cards.filter((card: any) => {\r\n      return card.value === 'A';\r\n    });\r\n    aces.forEach((card: any) => {\r\n      if (card.hidden === false) {\r\n        if ((total + 11) > 21) {\r\n          total += 1;\r\n        }\r\n        else if ((total + 11) === 21) {\r\n          if (aces.length > 1) {\r\n            total += 1\r\n          }\r\n          else {\r\n            total += 11\r\n          }\r\n        }\r\n        else {\r\n          total += 11;\r\n        }\r\n      }\r\n    });\r\n    setScore(total);\r\n  }\r\n\r\n  const hit = () => {\r\n    drawCard('user');\r\n  }\r\n\r\n  const stand = () => {\r\n    setUserTurn(false);\r\n    buttonState.hitDisabled = true;\r\n    buttonState.standDisabled = true;\r\n    buttonState.resetDisabled = false;\r\n    setButtonState({ ...buttonState });\r\n    setDealerTurn(true);\r\n    revealCard();\r\n  }\r\n\r\n  const bust = () => {\r\n    setUserTurn(false);\r\n    buttonState.hitDisabled = true;\r\n    buttonState.standDisabled = true;\r\n    buttonState.resetDisabled = false;\r\n    setButtonState({ ...buttonState });\r\n    setMessage('Bust!');\r\n  }\r\n\r\n  const checkWin = () => {\r\n    setDealerTurn(false);\r\n    if (userScore > dealerScore || dealerScore > 21) {\r\n      setMessage('You Win!');\r\n    }\r\n    else if (dealerScore > userScore) {\r\n      setMessage('Dealer Wins!');\r\n    }\r\n    else {\r\n      setMessage('Tie!');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Status message={message} />\r\n      <Controls buttonState={buttonState} hitEvent={hit} standEvent={stand} resetEvent={resetGame} />\r\n      <Hand title={`Dealer's Hand (${dealerScore})`} cards={dealerCards} />\r\n      <Hand title={`Your Hand (${userScore})`} cards={userCards} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}